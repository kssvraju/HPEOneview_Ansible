- name: software patch demo (httpd using yum package manager)
  hosts: all
  vars:
    username:
    password:
    instance:
    package: httpd

  tasks:
   - name: Get package version
     yum:
       list: "{{ package }}"
     register: software_version
     become: true

   - name: Read which version is installed and available
     set_fact:
       software_update: false
       software_version_installed: "{{ software_version | json_query(\"results[?yumstate=='installed'].release\") | last }}"
       software_version_available: "{{ software_version | json_query(\"results[?yumstate=='available'].release\") }}"
   - debug:
       var: software_version_installed
   - debug:
       var: software_version_available

   - name: include vars
     include_vars: incident_vars.yaml

   - name: SERVICENOW incident created if Available Software Update for "{{ package }}" from Vendor detected
     snow_record:
       username: "{{snow_username}}"
       password: "{{snow_password}}"
       instance: "{{snow_instance}}"
       state: present
       table: incident
       data:
         short_description: "Software Update Available on {{inventory_hostname}} was found for Software Package {{ package }}. The patching procress will now start"
         severity: 1
         priority: 2
         approval: approved
         caller_id: "System Administrator"
         comments: "An automated software version update check on {{inventory_hostname}} found an update available from the vendor. This ticket was generated by Ansible Tower API call. \n--------\n The current version of software is {{software_version_installed}}.\n--------\n The available version(s) of software is/are {{software_version_available}}. \n--------\n Recommendation: The system should be updated to a newer certified version. This version meets auto-approval criteria because of installed required dependencies and the update patching process will now start. The application owner has been notified.\n--------\n "
     register: snow_var
     delegate_to: localhost
     #when: errorCode.changed

   - name: DEBUG SNOW_VAR
     debug:
       var: snow_var.record.number


   - name: Patch "{{ package }}" to latest certified version
     yum:
       name: "{{ package }}"
       state: latest
     become: true

   - name: SERVICENOW incident updated and resolved if patch update process succeeded
     snow_record:
        username: "{{snow_username}}"
        password: "{{snow-password}}"
        instance: "{{snow_instance}}"
        number: "{{snow_var.record.number}}"
        state: present
        table: incident
        data:
          caller_id: "System Administrator"
          comments: "The software update process has now succeeded on {{inventory_hostname}} for software package {{package}}. This ticket was resolved by Ansible Tower API call in an update/patching playboook. \n--------\n The verification process will now start.\n--------\n "
          incident_state: 6
     register: snow_var
     delegate_to: localhost

   - name: Get package version
     yum:
       list: "{{ package }}"
     register: patch_version
     become: true

   - name: Verify latest certified version is installed and operational
     set_fact:
       patch_version_installed: "{{ patch_version | json_query(\"results[?yumstate=='installed'].release\") }}"
   - debug:
       var: patch_version_installed

   - name: SERVICENOW incident closed if batch job validation succeeded
     snow_record:
        username: "{{snow_username}}"
        password: "{{snow_password}}"
        instance: "{{snow_instance}}"
        number: "{{snow_var.record.number}}"
        state: present
        table: incident
        data:
          caller_id: "System Administrator"
          comments: "The upgraded version of softwar has now been validated on {{inventory_hostname}}. The validated upgrade software version is {{patch_version_installed}} This ticket was closed by Ansible Tower API call in a validation playboook. \n--------\n The update patching processing process has now been completed.\n--------\n "
          incident_state: 7
     register: snow_var
     delegate_to: localhost